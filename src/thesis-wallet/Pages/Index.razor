@page "/"
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider _ethereumHostProvider;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@using Nethereum.Contracts
@using Nethereum.Hex.HexTypes;
@using System.IO
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Newtonsoft.Json.Linq
@using System.Text
@using System.Xml.Serialization
@using System.Xml


@if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount)) {
    <MatDialog @bind-IsOpen="@menu.existingDialogIsOpen">
        <MatDialogTitle>Join existing contract</MatDialogTitle>
        <MatDialogContent>
            <p>Das Contract address</p>
            <MatTextField Outlined="true" @bind-Value="@menu.dasContractAddress" style="width: 30em;"></MatTextField>
            <p>Das Contract Form file (xml)</p>
            <InputFile OnChange="menu.LoadFilesDialog" accept=".xml" />
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@menu.CancelExistingContractDialog">Cancel</MatButton>
            <MatButton OnClick="@menu.SubmitExistingContractDialog">Add</MatButton>
        </MatDialogActions>
    </MatDialog>
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle mat-layout-grid-cell-span-4">
                        <div style="display:flex;justify-content:center;">
                            <MatFAB Icon="@MatIconNames.Home" Raised="true"></MatFAB>
                        </div>
                        <div style="display:flex;justify-content:center;">
                            <MatButtonLink Href="" Style="font-size:0.8em">Dashboard</MatButtonLink>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                        <div style="display:flex;justify-content:center;">
                            <MatFAB Icon="@MatIconNames.Note_add" Raised="true"></MatFAB>
                        </div>
                        <div style="display:flex;justify-content:center;">
                            <MatButtonLink Href="" Style="font-size:0.8em">New contract</MatButtonLink>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                        <div style="display:flex;justify-content:center;">
                            <MatFAB Icon="@MatIconNames.Pageview" Raised="true" OnClick="@menu.OpenExistingContractDialog"></MatFAB>
                        </div>
                        <div style="display:flex;justify-content:center;">
                            <MatButtonLink Href="" Style="font-size:0.8em" OnClick="@menu.OpenExistingContractDialog">Join existing</MatButtonLink>
                        </div>
                    </div>
                </div>                
                <MatTreeView TNode="TreeNodeModel" RootNodes="@menu.ViewRoots" GetChildNodesCallback="@((n)=>n.Nodes)" @bind-SelectedNode="@menu.SelectedNode" @bind-SelectedNode:event="SelectedNodeChanged">
                    <NodeTemplate>
                        @context.Name
                    </NodeTemplate>
                </MatTreeView>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9">
                Rest
                @menu.SelectedNode?.Name
            </div>
        </div>
    </div>
}
else
{
     <Metamask />
}


@code{
    DasContractMenu menu = new DasContractMenu();
    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }
    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnInitializedAsync() {
        _ethereumHostProvider.SelectedAccountChanged += AccountChanged;
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
    }

    private async Task AccountChanged(string account) {
        SelectedAccount = account;
        await this.InvokeAsync(StateHasChanged);
    }

    protected async Task GetBlockHashAsync() {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    protected async Task TransferEtherAsync() {
        try {
            string smartContractAddress = "0xCc838408bF5B77b60970b60F4F5c977b1f11F514";
            string abiStandardToken = @"[{""constant"":true,""inputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""name"":""adopters"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""internalType"":""uint256"",""name"":""petId"",""type"":""uint256""}],""name"":""adopt"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getAdopters"",""outputs"":[{""internalType"":""address[16]"",""name"":"""",""type"":""address[16]""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]";
            var web3 = await _ethereumHostProvider.GetWeb3Async();
            var contract = web3.Eth.GetContract(abiStandardToken, smartContractAddress);
            var contractHandler = web3.Eth.GetContractHandler(smartContractAddress);
            Console.WriteLine(contractHandler.EthApiContractService.GetCode.ToString());
            Function adoptapet = contract.GetFunction("adopt");
            object[] paramser = new object[1]{ 3 };
            var transactionHash = await adoptapet.SendTransactionAsync(SelectedAccount, new HexBigInteger(63721), null, paramser);
            Console.WriteLine(transactionHash);
            
            
            
            
            /*Function adopters = contract.GetFunction("getAdopters");
            List<Nethereum.ABI.FunctionEncoding.ParameterOutput> result = await adopters.CallDecodingToDefaultAsync();
            foreach (Nethereum.ABI.FunctionEncoding.ParameterOutput x in result) {
                Console.WriteLine(x.DataIndexStart);
                Console.WriteLine(x.Parameter.ABIType);
                Console.WriteLine(x.Parameter.DecodedType);
                Console.WriteLine(x.Parameter.Indexed);
                Console.WriteLine(x.Parameter.InternalType);
                Console.WriteLine(x.Parameter.Name);
                Console.WriteLine(x.Parameter.Order);
                Console.WriteLine(x.Parameter.Type);
                Console.WriteLine("xxxxxxxxxx");
                foreach (var z in (List<object>)x.Result) {
                    Console.WriteLine(z);                
                }
            }*/
        } catch (Exception ex) {
            ErrorTransferMessage = ex.Message;
        }
    }











    /* MENU */
    class TreeNodeModel {
        public TreeNodeModel(string name, Form form = null) {
            Name = name;
            Form = form;
        }

        public string Name { get; set; }
        public Form Form { get; set; }
        public List<TreeNodeModel> Nodes { get; set; } = new List<TreeNodeModel>();
    }

    class DasContractItem {        
        public string ContractAddress { get; set; }
        public DContract DasContract { get; set; }

        public DasContractItem(string contractForm, string other, bool deploy) {
            using (TextReader reader = new StringReader(contractForm)) {
                XmlSerializer serializer = create_throwing_serializer();
                XmlReader xmlreader = new XmlTextReader(reader);
                try {
                    DasContract = (DContract)serializer.Deserialize(xmlreader);
                } catch (Exception e) {
                    Console.WriteLine("Error parsing XML!\n" + $"Error:\n{e.Message}\n{e.StackTrace}");
                    return;
                }
            }
            if (deploy) {                
                ContractAddress = "";
            } else {
                ContractAddress = other;                
            }
        }
        
        private void Serializer_Throw(object sender, XmlElementEventArgs e) {
            throw new Exception("XML format exception.");
        }
        private void Serializer_Throw(object sender, XmlAttributeEventArgs e) {
            throw new Exception("XML format exception.");
        }
        private void Serializer_Throw(object sender, XmlNodeEventArgs e) {
            throw new Exception("XML format exception.");
        }
        
        private XmlSerializer create_throwing_serializer() {
            XmlSerializer serializer = new XmlSerializer(typeof(DContract));
            serializer.UnknownAttribute += new XmlAttributeEventHandler(Serializer_Throw);
            serializer.UnknownElement += new XmlElementEventHandler(Serializer_Throw);
            serializer.UnknownNode += new XmlNodeEventHandler(Serializer_Throw);
            return serializer;
        }
    }

    class DasContractMenu {
        public List<TreeNodeModel> ViewRoots { get; set; } = new List<TreeNodeModel>();
        private TreeNodeModel selectedNode;
        public TreeNodeModel SelectedNode {
            get {
                return selectedNode;
            }
            set {
                if (value?.Form != null) {
                    selectedNode = value;
                }
            }
        }
        public List<DasContractItem> availableContracts = new List<DasContractItem>();
        public bool existingDialogIsOpen = false;
        public bool newDialogIsOpen = false;
        public string dasContractBytecode = "";
        public string dasContractAddress = "";
        public string dasFormFile = "";
    
        public void OpenExistingContractDialog() {
            existingDialogIsOpen = true;
        }
 
        public void SubmitExistingContractDialog() {
            DasContractItem item = new DasContractItem(dasFormFile, dasContractAddress, false);
            availableContracts.Add(item);            
            TreeNodeModel root = new TreeNodeModel(item.DasContract.Name);

            foreach (Form form in item.DasContract.Forms) {
                root.Nodes.Add(new TreeNodeModel(form.Label, form));
            }
            ViewRoots.Add(root);

            existingDialogIsOpen = false;
            dasContractBytecode = "";
            dasContractAddress = "";
        }
 
        public void CancelExistingContractDialog() {
            existingDialogIsOpen = false;
            dasContractBytecode = "";
            dasContractAddress = "";
        }        

        public async Task LoadFilesDialog(InputFileChangeEventArgs e) {
            try {
                foreach (var file in e.GetMultipleFiles(1)) {
                    using var reader = new StreamReader(file.OpenReadStream(100*1024));
                    dasFormFile = await reader.ReadToEndAsync();
                }
            } catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }
        }   
    }
}