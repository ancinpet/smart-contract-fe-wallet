@page "/"
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider _ethereumHostProvider;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IMatToaster Toaster
@using Nethereum.ABI.FunctionEncoding
@using Nethereum.Contracts
@using Nethereum.Hex.HexTypes;
@using System.IO
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Nethereum.RPC.Eth.DTOs
@using Nethereum.Util
@using Nethereum.Web3
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text
@using System.Xml.Serialization
@using System.Xml
@using System.Collections
@using System.Threading
@using System.Numerics
@using System.Text.RegularExpressions
@using static Nethereum.Util.UnitConversion


@if (EthereumAvailable == true && !string.IsNullOrEmpty(menu.SelectedAccount)) {
    <MatDialog @bind-IsOpen="@menu.existingDialogIsOpen">
        <MatDialogTitle>Join existing contract</MatDialogTitle>
        <MatDialogContent>
            <p>Das Contract address</p>
            <MatTextField Outlined="true" @bind-Value="@menu.dasContractAddress" style="width:30em;"></MatTextField>
            <p>Das Contract Form file (xml)</p>
            <InputFile OnChange="menu.LoadFilesDialog" accept=".xml" />
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@menu.CancelExistingContractDialog">Cancel</MatButton>
            <MatButton OnClick="@menu.SubmitExistingContractDialog">Add</MatButton>
        </MatDialogActions>
    </MatDialog>
    <MatDialog @bind-IsOpen="@menu.newDialogIsOpen">
        <MatDialogTitle>Create new contract</MatDialogTitle>
        <MatDialogContent>
            <p>Das Contract bytecode</p>
            <MatTextField Outlined="true" @bind-Value="@menu.dasContractByteCode" style="width:30em;"></MatTextField>
            <p>Das Contract constructor parameters</p>
            <MatTextField Outlined="true" @bind-Value="@menu.dasContractConstructorParams" style="width:30em;"></MatTextField>
            <p>Das Contract Form file (xml)</p>
            <InputFile OnChange="menu.LoadFilesDialog" accept=".xml" />
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@menu.CancelNewContractDialog">Cancel</MatButton>
            <MatButton OnClick="@menu.SubmitNewContractDialog">Add</MatButton>
        </MatDialogActions>
    </MatDialog>
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle mat-layout-grid-cell-span-4">
                        <div style="display:flex;justify-content:center;">
                            <MatFAB Icon="@MatIconNames.Home" Raised="true" OnClick="@menu.LoadDashboard"></MatFAB>
                        </div>
                        <div style="display:flex;justify-content:center;">
                            <MatButtonLink Href="" Style="font-size:0.8em" OnClick="@menu.LoadDashboard">Dashboard</MatButtonLink>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                        <div style="display:flex;justify-content:center;">
                            <MatFAB Icon="@MatIconNames.Note_add" Raised="true" OnClick="@menu.OpenNewContractDialog"></MatFAB>
                        </div>
                        <div style="display:flex;justify-content:center;">
                            <MatButtonLink Href="" Style="font-size:0.8em" OnClick="@menu.OpenNewContractDialog">New contract</MatButtonLink>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                        <div style="display:flex;justify-content:center;">
                            <MatFAB Icon="@MatIconNames.Pageview" Raised="true" OnClick="@menu.OpenExistingContractDialog"></MatFAB>
                        </div>
                        <div style="display:flex;justify-content:center;">
                            <MatButtonLink Href="" Style="font-size:0.8em" OnClick="@menu.OpenExistingContractDialog">Join existing</MatButtonLink>
                        </div>
                    </div>
                </div>
                <br />
                <MatDivider></MatDivider>
                <MatH5 Style="text-align:center;line-height:110%;padding-top:0.2em">Contract list</MatH5>
                <MatDivider></MatDivider>
                <MatTreeView TNode="TreeNodeModel" IsNodeExpandedCallback="@menu.ItemIsExpanded" RootNodes="@menu.ViewRootsDisplayed" GetChildNodesCallback="@((n)=>n.Nodes)" @bind-SelectedNode="@menu.SelectedNode" @bind-SelectedNode:event="SelectedNodeChanged">
                    <NodeTemplate>                        
                        <div style="display:flex;justify-content:space-between;align-items:center;min-width:calc(22.5vw - 1.5em);">
                            <div>@context.Name</div>
                            @if (context.DasContractItem == null) {
                                <div><MatIconButton Icon="delete" OnClick="@(e => @menu.DeleteContract(context.Address))" OnClickStopPropagation="true"></MatIconButton></div>
                            }
                        </div>
                    </NodeTemplate>
                </MatTreeView>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9">
                @if (menu != null && menu.SelectedNode != null && menu.SelectedNode.Form != null) {
                    <CascadingValue Value="@menu.SelectedNode">
                        <CascadingValue Value="@menu.SelectedNode.Form">
                            <DForm @ref="menu._DForm"></DForm>
                        </CascadingValue>
                    </CascadingValue>
                } else {
                    <CascadingValue Value="@menu">
                        <CascadingValue Value="@menu.ViewRootsDisplayed">
                            <DashBoard @ref="menu._DDash"></DashBoard>
                        </CascadingValue>
                    </CascadingValue>
                }
            </div>
        </div>
    </div>
} else {
     <Metamask />
}


@code{
    DasContractMenu menu = new DasContractMenu();
    bool EthereumAvailable { get; set; }

    protected override async Task OnInitializedAsync() {
        menu.Component = this;
        _ethereumHostProvider.SelectedAccountChanged += AccountChanged;
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        menu.w3 = await _ethereumHostProvider.GetWeb3Async();
        menu.LoadContractsFromStorage();
    }

    private async Task AccountChanged(string account) {
        menu.SelectedAccount = account;
        menu.LoadFormData(menu.SelectedNode);
        await this.InvokeAsync(StateHasChanged);
        menu._DDash.LoadData();
    }

    /* MENU */
    public class TreeNodeModel {
        private DasContractMenu Menu { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public DasContractItem DasContractItem { get; set; }
        public Form Form { get; set; }
        public List<TreeNodeModel> Nodes { get; set; } = new List<TreeNodeModel>();
        public bool IsExpanded { get; set; } = true;
        public Web3 w3 { get; set; }
        public int Priority { get; set; }
        public DateTime Due { get; set; }

        public TreeNodeModel(string name, string address, Web3 w = null, DasContractMenu menu = null, DasContractItem contract = null, Form form = null) {
            Random random = new Random();
            Menu = menu;
            Address = address;
            w3 = w;
            Name = name;
            DasContractItem = contract;
            Form = form;
            Priority = random.Next(1, 11);
            int times = random.Next(0, 11);

            if (times == 0) {
                Due = new DateTime(0);
            } else if (times == 1) {
                Due = DateTime.Now.AddMinutes(-1 * random.Next(0, 119));
            } else if (times == 2 || times == 3 || times == 4) {
                Due = DateTime.Now.AddMinutes(random.Next(1, 119));
            } else if (times == 5 ||times == 6 ||times == 7) {
                Due = DateTime.Now.AddHours(random.Next(1, 26)).AddMinutes(random.Next(1, 62));
            } else {
                Due = DateTime.Now.AddDays(random.Next(0, 30)).AddHours(random.Next(1, 100));
            }
        }

        public async void SubmitSmartContractFunction() {
            Contract contract = null;
            JArray callableFunctions = null;
            try {
                contract = w3.Eth.GetContract(DasContractItem.DasContract.ABI, DasContractItem.ContractAddress);
                callableFunctions = JArray.Parse(DasContractItem.DasContract.ABI);                
            } catch (Exception) {
                Menu.Component.Toaster.Add($"Unable to submit form {Form.Label} because the provided Contract address/ABI is not valid.", MatToastType.Danger, "Address/ABI Invalid Error");
                return;
            }
            JObject desiredFunc = null;
            foreach (JObject callableFunction in callableFunctions) {
                if (callableFunction["name"]?.ToString() == Form.FuncBind) {
                    desiredFunc = callableFunction;
                }
            }
            if (desiredFunc == null) {
                Menu.Component.Toaster.Add($"Unable to submit form {Form.Label} because the function {Form.FuncBind} does not exist in the smart contract.", MatToastType.Danger, "Function Missing Error");
                return;
            }
            List<object> inputs = new List<object>();
            string paymentValue = "0";
            foreach (var input in ((JArray)desiredFunc["inputs"])) {
                string toSearchFor = input["name"].ToString();
                bool founds = false;
                foreach (FieldGroup fieldGroup in Form.FieldGroups) {
                    foreach (Field field in fieldGroup.Fields) {
                        if (field.ParamBind == toSearchFor) {
                            inputs.Add(field.GetData());
                            founds = true;
                            break;
                        }
                    }
                    if (founds) {
                        break;
                    }
                }
                if (!founds) {
                    Menu.Component.Toaster.Add($"Unable to submit form {Form.Label} because the parameter {toSearchFor} was not provided for the function {Form.FuncBind}.", MatToastType.Danger, "Parameters Missing Error");
                    return;
                }
            }
            bool found = false;
            foreach (FieldGroup fieldGroup in Form.FieldGroups) {
                foreach (Field field in fieldGroup.Fields) {
                    if (field.ParamBind == "const:payValue") {
                        paymentValue = field.GetData().ToString();
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
            object[] paramsToCall = Menu.ParametersToObjectField(inputs);
            if (paramsToCall.Length == 0) {
                paramsToCall = null;
            }
            if (String.IsNullOrEmpty(paymentValue)) {
                paymentValue = "0";
            }
            HexBigInteger paymentValueHex = null;
            try {
                if (paymentValue.Contains(".")) {
                    decimal val = Decimal.Parse(paymentValue);
                    BigInteger paymentValueInt = Web3.Convert.ToWeiFromUnit(val, Web3.Convert.GetEthUnitValue(EthUnit.Ether));
                    paymentValueHex = new HexBigInteger(paymentValueInt);
                } else {
                    BigInteger paymentValueInt = BigInteger.Parse(paymentValue);
                    paymentValueHex = new HexBigInteger(paymentValueInt);
                }
            } catch (Exception) {
                Menu.Component.Toaster.Add($"Error when trying to parse the transaction currency amount: ({paymentValue}) Ether.", MatToastType.Danger, "Smart contract/Blockchain Payment Error");
                return;
            }
            
            try {
                Function contractTransaction = contract.GetFunction(Form.FuncBind);
                string transactionHash = await contractTransaction.SendTransactionAsync(Menu.SelectedAccount, new HexBigInteger(BigInteger.Parse("2100000")), paymentValueHex, paramsToCall);
                var receipt = await w3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
                int maxAttempts = 0;
                while (receipt == null){
                    Thread.Sleep(1000);
                    receipt = await w3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
                    if (maxAttempts++ > 30) {
                        break;
                    }
                }
            } catch (Exception) {
                Menu.Component.Toaster.Add($"Error when sending the transaction {Form.FuncBind} to blockchain.", MatToastType.Danger, "Smart contract/Blockchain Transaction Error");
                return;
            }
            Menu.LoadFormData(Menu.SelectedNode);
        }
    }

    public class DasContractItem {        
        public string ContractAddress { get; set; }
        public DContract DasContract { get; set; }

        public DasContractItem(string contractForm, string address, DasContractMenu Menu) {
            using (TextReader reader = new StringReader(contractForm)) {
                XmlSerializer serializer = create_throwing_serializer();
                XmlReader xmlreader = new XmlTextReader(reader);
                try {
                    DasContract = (DContract)serializer.Deserialize(xmlreader);
                } catch (Exception e) {
                    Menu.Component.Toaster.Add($"Error parsing the provided XML Forms File. Check developer console for more details.", MatToastType.Danger, "Contract XML Parse Error");
                    Console.WriteLine("Contract XML Parse Error");
                    Console.WriteLine(e.Message);
                    Console.WriteLine(e.StackTrace);
                    throw;
                }
            }
            ContractAddress = address;
        }
        
        private void Serializer_Throw(object sender, XmlElementEventArgs e) {
            throw new Exception("XML format exception (Unknown element found).");
        }
        private void Serializer_Throw(object sender, XmlAttributeEventArgs e) {
            throw new Exception("XML format exception (Unknown attribute found).");
        }
        private void Serializer_Throw(object sender, XmlNodeEventArgs e) {
            throw new Exception("XML format exception (Unknown node found).");
        }
        
        private XmlSerializer create_throwing_serializer() {
            XmlSerializer serializer = new XmlSerializer(typeof(DContract));
            serializer.UnknownAttribute += new XmlAttributeEventHandler(Serializer_Throw);
            serializer.UnknownElement += new XmlElementEventHandler(Serializer_Throw);
            serializer.UnknownNode += new XmlNodeEventHandler(Serializer_Throw);
            return serializer;
        }
    }

    public class DasContractMenu {
        public Index Component { get; set; }
        public DForm _DForm { get; set; }
        public DashBoard _DDash { get; set; }
        public Web3 w3 { get; set; }
        public List<TreeNodeModel> ViewRoots { get; set; } = new List<TreeNodeModel>();
        public List<TreeNodeModel> ViewRootsDisplayed { get; set; } = new List<TreeNodeModel>();
        private TreeNodeModel selectedNode;
        public TreeNodeModel SelectedNode {
            get {
                return selectedNode;
            }
            set {
                if (value?.Form != null) {
                    selectedNode = value;
                    LoadFormData(selectedNode);
                } else if (value != null) {
                    value.IsExpanded = !value.IsExpanded;
                }
            }
        }
        public List<DasContractItem> availableContracts = new List<DasContractItem>();
        public bool existingDialogIsOpen = false;
        public bool newDialogIsOpen = false;
        public string dasContractConstructorParams = "";
        public string dasContractByteCode = "";
        public string dasContractAddress = "";
        public string dasFormFile = "";
        public string SelectedAccount = "";

        public async void LoadFormData(TreeNodeModel item) {
            if (item == null) {
                return;
            }

            foreach (FieldGroup fieldGroup in item.Form.FieldGroups) {
                foreach (Field field in fieldGroup.Fields) {
                    if (!String.IsNullOrEmpty(field.ViewBind)) {
                        string fixated = "const:";
                        if (field.ViewBind.Substring(0, fixated.Length) == fixated) {
                            string remainder = field.ViewBind.Substring(fixated.Length);
                            if (remainder == "myAccountAddress") {
                                field.SetData(SelectedAccount);
                            } else if (remainder == "myContractAddress") {
                                field.SetData(item.DasContractItem.ContractAddress);
                            } else {
                                field.SetData(remainder);
                            }
                        } else {
                            ViewToken tokenized = null;
                            Function dataView = null;
                            try {
                                Contract contract = w3.Eth.GetContract(item.DasContractItem.DasContract.ABI, item.DasContractItem.ContractAddress);
                                tokenized = TokenizeCall(field.ViewBind);
                                dataView = contract.GetFunction(tokenized.FuncName);
                            } catch (Exception) {
                                Component.Toaster.Add($"Unable to load field {field.Label} because the provided Contract address/ABI/Binding is not valid.", MatToastType.Danger, "Address/ABI/Binding Invalid Error");
                                continue;
                            }
                            
                            List<object> inputs = new List<object>();
                            inputs.AddRange(tokenized.Parameters);
                            object[] paramsToCall = ParametersToObjectField(inputs);
                            List<ParameterOutput> retValues = null;
                            try {
                                retValues = await dataView.CallDecodingToDefaultAsync(paramsToCall);
                            } catch (Exception) {
                                Component.Toaster.Add($"Unable to load field {field.Label} because the blockchain call failed.", MatToastType.Danger, "Smart contract/Blockchain Call Error");
                                continue;
                            }
                            List<string> output = OutputFromResult(retValues, tokenized, field);
                            if (output.Count == 1) {
                                field.SetData(output[0]);
                            } else {
                                field.SetDataList(output);
                            }
                        }
                    }
                }
            }
            UpdateMenuView();
            _DForm?.refresh();
        }

        private List<string> OutputFromResult(List<ParameterOutput> retValues, ViewToken tokenized, Field field) {
            List<string> output = new List<string>();
            List<ParameterOutput> outputsToProcess = new List<ParameterOutput>();
            if (!String.IsNullOrEmpty(tokenized.Property)) {                
                foreach (ParameterOutput retValue in retValues) {
                    if (retValue.Parameter.Name == tokenized.Property) {
                        outputsToProcess.Add(retValue);
                        break;
                    }    
                }
            } else {
                outputsToProcess.AddRange(retValues);
            }

            if (outputsToProcess.Count == 1) {
                ParameterOutput singleReturn = outputsToProcess[0];
                if (IsIterable(singleReturn.Parameter.DecodedType)) {
                    List<object> resArray = (List<object>)singleReturn.Result;
                    if (tokenized.Index >= 0) {
                        if (resArray.Count > tokenized.Index) {
                            output.Add(resArray[tokenized.Index].ToString());
                        } else {
                            Console.WriteLine($"Ignoring field {field.Label}. Index out of bounds for array retrieved from {field.ViewBind}!");
                        }                                            
                    } else {
                        foreach (object res in resArray) {
                            output.Add(res.ToString());
                        }
                    }
                } else {
                    output.Add(singleReturn.Result.ToString());
                }
            } else {
                if (tokenized.Index >= 0) {
                    if (outputsToProcess.Count > tokenized.Index) {
                        ParameterOutput singleReturn = outputsToProcess[tokenized.Index];
                        if (IsIterable(singleReturn.Parameter.DecodedType)) {
                            List<object> resArray = (List<object>)singleReturn.Result;
                            foreach (object res in resArray) {
                                output.Add(res.ToString());
                            }
                        } else {
                            output.Add(singleReturn.Result.ToString());
                        }
                    } else {
                        Console.WriteLine($"Ignoring field {field.Label}. Index out of bounds for parameter order from {field.ViewBind}!");
                    }   
                } else {
                    foreach (ParameterOutput singleReturn in outputsToProcess) { 
                        if (IsIterable(singleReturn.Parameter.DecodedType)) {
                            List<object> resArray = (List<object>)singleReturn.Result;
                            foreach (object res in resArray) {
                                output.Add(res.ToString());
                            }
                        } else {
                            output.Add(singleReturn.Result.ToString());
                        }
                    }
                }
            }

            return output;            
        }

        private string TokenizeParams(ViewToken token, string prepend, string format) {
            if (format == ")") {
                return prepend;
            }

            string[] second = format.Split(')');
            foreach (string funcParam in second[0].Split(',')) {
                token.Parameters.Add(funcParam);
            }
            if (second.Length == 1) {
                return prepend;
            }
            return prepend + second[1];    
        }

        private string TokenizeProperty(ViewToken token, string prepend, string format) {
            string[] third = format.Split('[');
            if (third.Length == 1) {
                token.Property = format;
                return prepend;
            }
            token.Property = third[0];
            return prepend + '[' + third[1];
        }

        public ViewToken TokenizeCall(string format) {
            format = format.Replace(" ", String.Empty);
            ViewToken token = new ViewToken();

            string[] first = format.Split('(');
            if (first.Length == 2) {
                format = TokenizeParams(token, first[0], first[1]);
            }

            string[] second = format.Split('.');
            if (second.Length == 2) {
                format = TokenizeProperty(token, second[0], second[1]);
            }

            string[] third = format.Split('[');
            if (third.Length == 2) {
                token.FuncName = third[0];
                string indexer = third[1].Replace("]", String.Empty);
                token.Index = System.Convert.ToInt32(indexer);                
            } else {
                token.FuncName = format;
            }

            return token;
        }

        public object[] ParametersToObjectField(List<object> parameters) {
            for (int i = 0; i < parameters.Count; ++i) {
                object res = parameters[i];
                if (res.ToString().Length > 1 && res.ToString().Substring(0, 2) == "0x") {
                    continue;
                }
                try {
                    BigInteger serializedRes = BigInteger.Parse(res.ToString());
                    parameters[i] = serializedRes;
                } catch (Exception) {
                    continue;
                }
            }
            var result = parameters.Cast<object>().ToArray();
            return result;
        }

        private bool IsIterable(Type type) {
            return typeof(IEnumerable).IsAssignableFrom(type) && type != typeof(string);
        }
    
        public void LoadDashboard() {
            _DDash.LoadData();
            selectedNode = null;
        }

        public bool ItemIsExpanded(TreeNodeModel model) {
            return model.IsExpanded;
        }

        public void OpenNewContractDialog() {
            newDialogIsOpen = true;
        }

        public void OpenExistingContractDialog() {
            existingDialogIsOpen = true;
        }
 
        public async void SubmitNewContractDialog() {
            DasContractItem item = null;
            try {                
                item = new DasContractItem(dasFormFile, "", this);
            } catch (Exception) {
                return;
            }
            dasContractConstructorParams = dasContractConstructorParams.Replace(" ", String.Empty);
            string[] parameters = dasContractConstructorParams.Split(',');
            List<object> inputs = new List<object>();
            inputs.AddRange(parameters);
            object[] paramsToCall = ParametersToObjectField(inputs);
            if (String.IsNullOrEmpty(dasContractConstructorParams)) {
                paramsToCall = null;
            }
            TransactionReceipt receipt = null;
            try {
                var estimateGas = await w3.Eth.DeployContract.EstimateGasAsync(item.DasContract.ABI, dasContractByteCode, SelectedAccount, paramsToCall);
                receipt = await w3.Eth.DeployContract.SendRequestAndWaitForReceiptAsync(item.DasContract.ABI, dasContractByteCode, SelectedAccount, estimateGas, null, paramsToCall);
            } catch (Exception) {
                Component.Toaster.Add($"Unable to deploy Smart contract because the transaction failed.", MatToastType.Danger, "Smart contract/Blockchain Deploy Error");
                return;
            }
            item.ContractAddress = receipt.ContractAddress;
            SaveContractToStorage(item.ContractAddress, dasFormFile);
            LoadDasContract(item, item.ContractAddress);
            newDialogIsOpen = false;
            dasContractByteCode = "";
            dasContractAddress = "";
            dasContractConstructorParams = "";
            Component.StateHasChanged();
        }

        public void CancelNewContractDialog() {
            newDialogIsOpen = false;
            dasContractByteCode = "";
            dasContractAddress = "";
        }
 
        public void SubmitExistingContractDialog() {
            if (!IsValidAddress(dasContractAddress)) {
                Component.Toaster.Add($"The address {dasContractAddress} is not a valid Ethereum address.", MatToastType.Danger, "Cannot add this contract");
                return;
            }

            if (Component.localStorage.ContainKey(dasContractAddress)) {
                existingDialogIsOpen = false;
                dasContractByteCode = "";
                dasContractAddress = "";
                Component.Toaster.Add($"Contract for the address {dasContractAddress} already exists.", MatToastType.Danger, "Cannot add this contract");
                return;
            }
            DasContractItem item = null;
            try {                
                item = new DasContractItem(dasFormFile, dasContractAddress, this);
            } catch (Exception) {
                return;
            }
            SaveContractToStorage(dasContractAddress, dasFormFile);
            LoadDasContract(item, dasContractAddress);
            existingDialogIsOpen = false;
            dasContractByteCode = "";
            dasContractAddress = "";
        }

        public void SaveContractToStorage(string key, string value) {
            Component.localStorage.SetItem(key, value);
        }

        public void LoadContractsFromStorage() {
            ViewRoots = new List<TreeNodeModel>();
            ViewRootsDisplayed = new List<TreeNodeModel>();
            for (int i = 0; i < Component.localStorage.Length(); ++i) {
                string address = Component.localStorage.Key(i);
                string formFile = Component.localStorage.GetItemAsString(address);
                DasContractItem item = null;
                try {
                    item = new DasContractItem(formFile, address, this);
                } catch (Exception) {
                    continue;
                }
                LoadDasContract(item, address);
            }
            Component.StateHasChanged();
        }

        public void LoadDasContract(DasContractItem item, string contractAddress) {
            availableContracts.Add(item);            
            TreeNodeModel root = new TreeNodeModel(item.DasContract.Name, contractAddress);
            foreach (Form form in item.DasContract.Forms) {
                root.Nodes.Add(new TreeNodeModel(form.Label, contractAddress, w3, this, item, form));
            }
            ViewRoots.Add(root);
            UpdateMenuView();
        }

        public void DeleteContract(string address) {
            Component.localStorage.RemoveItem(address);
            LoadContractsFromStorage();
        }

        public void CancelExistingContractDialog() {
            existingDialogIsOpen = false;
            dasContractByteCode = "";
            dasContractAddress = "";
        }

        public async Task LoadFilesDialog(InputFileChangeEventArgs e) {
            try {
                foreach (var file in e.GetMultipleFiles(1)) {
                    using var reader = new StreamReader(file.OpenReadStream(100*1024));
                    dasFormFile = await reader.ReadToEndAsync();
                }
            } catch (Exception ex) {
                Component.Toaster.Add($"Unable to read provided XML Forms File.", MatToastType.Danger, "Contract XML Load Error");
                Console.WriteLine(ex.Message);
            }
        }

        public async void UpdateMenuView() {
            List<TreeNodeModel> ViewRootsDisplayedTmp = new List<TreeNodeModel>();
            foreach (TreeNodeModel node in ViewRoots) {
                TreeNodeModel root = new TreeNodeModel(node.Name, node.Address);
                if (await UpdateNodeView(root, node)) {
                    ViewRootsDisplayedTmp.Add(root);
                }
            }
            ViewRootsDisplayed = ViewRootsDisplayedTmp;
            Component.StateHasChanged();
            _DDash?.LoadData();
            Component.StateHasChanged();
        }

        public async Task<bool> UpdateNodeView(TreeNodeModel root, TreeNodeModel node) {
            foreach (TreeNodeModel item in node.Nodes) {
                if ((await StateMachineValid(item)) && (await RoleValid(item))) {
                    root.Nodes.Add(item);
                }
            }

            return root.Nodes.Count > 0;
        }

        public async Task<bool> StateMachineValid(TreeNodeModel item) {
            if (String.IsNullOrEmpty(item.Form.FuncBind) || String.IsNullOrEmpty(item.Form.StateMachine)) {
                return true;
            }

            try {
                Contract contract = w3.Eth.GetContract(item.DasContractItem.DasContract.ABI, item.DasContractItem.ContractAddress);
                Function stateView = contract.GetFunction(item.Form.StateMachine);                            
                List<object> inputs = new List<object>();
                inputs.Add(item.Form.FuncBind);
                object[] paramsToCall = ParametersToObjectField(inputs);
                List<ParameterOutput> retValues = await stateView.CallDecodingToDefaultAsync(paramsToCall);

                return System.Convert.ToBoolean(retValues[0].Result.ToString());
            } catch (Exception) {
                return false;
            }
        }

        public async Task<bool> RoleValid(TreeNodeModel item) {
            if (String.IsNullOrEmpty(item.Form.Role) || String.IsNullOrEmpty(item.Form.RoleMachine)) {
                return true;
            }

            try {
                Contract contract = w3.Eth.GetContract(item.DasContractItem.DasContract.ABI, item.DasContractItem.ContractAddress);
                Function roleView = contract.GetFunction(item.Form.RoleMachine);                            
                List<object> inputs = new List<object>();
                inputs.Add(item.Form.Role);
                object[] paramsToCall = ParametersToObjectField(inputs);
                List<ParameterOutput> retValues = await roleView.CallDecodingToDefaultAsync(paramsToCall);
                string address = retValues[0].Result.ToString();

                return address == "0x0000000000000000000000000000000000000000" || address.ToLower() == SelectedAccount.ToLower();
            } catch (Exception) {
                return false;
            }
        }

        public static bool IsValidAddress(string address) {
            Regex r = new Regex("^(0x){1}[0-9a-fA-F]{40}$");

            if (!r.IsMatch(address)) {
                return false;
            } else if (address == address.ToLower()) {
                return true;
            } else {
                return new AddressUtil().IsChecksumAddress(address);
            }
        }
    }

    public class ViewToken {
        public string FuncName { get; set; } = "";
        public List<string> Parameters { get; set; } = new List<string>();
        public string Property { get; set; } = "";
        public int Index { get; set; } = -1;
    }
}